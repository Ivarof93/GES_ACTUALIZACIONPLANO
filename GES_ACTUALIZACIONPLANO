import pandas as pd
import tkinter as tk
from tkinter import messagebox, filedialog
from tkcalendar import Calendar
from datetime import datetime, timedelta


# Función para seleccionar el archivo Excel
def seleccionar_archivo():
    archivo = filedialog.askopenfilename(
        title="Selecciona el archivo Excel",
        filetypes=[("Archivos de Excel", "*.xlsx *.xls")]
    )
    return archivo


# Función para guardar el archivo de salida
def guardar_archivo():
    archivo = filedialog.asksaveasfilename(
        title="Guardar archivo como",
        defaultextension=".xlsx",
        filetypes=[("Archivos de Excel", "*.xlsx")]
    )
    return archivo


# Función para obtener el lunes de hace dos semanas
def obtener_fecha_lunes():
    hoy = datetime.today()
    dias_para_lunes = hoy.weekday()
    lunes_hace_dos_semanas = hoy - timedelta(days=dias_para_lunes + 7)
    return lunes_hace_dos_semanas.strftime("%Y-%m-%d")


# Función para obtener los pacientes únicos y la última fecha de control
def obtener_ultimos_controles(df, columna_identificacion, columna_fecha, fecha_referencia):
    df[columna_identificacion] = df[columna_identificacion].astype(str)
    df[columna_fecha] = pd.to_datetime(df[columna_fecha], errors='coerce')
    pacientes_ultimos_controles = df.groupby(columna_identificacion)[columna_fecha].max()
    resultados = pacientes_ultimos_controles.reset_index()
    resultados.columns = [columna_identificacion, "Último control (fecha)"]
    resultados["Último control (fecha)"] = resultados["Último control (fecha)"].dt.strftime('%Y-%m-%d')
    fecha_referencia = pd.to_datetime(fecha_referencia, errors='coerce')
    resultados["Días transcurridos"] = (fecha_referencia - pd.to_datetime(resultados["Último control (fecha)"])).dt.days
    return resultados


# Función para contar el número de controles por paciente con condiciones en el código CUPS
def contar_controles_por_paciente(df, columna_identificacion, columna_cups):
    df[columna_identificacion] = df[columna_identificacion].astype(str)
    df[columna_cups] = df[columna_cups].astype(str)
    codigos_interes = ["890301", "890201", "890205", "890305", "890350", "890250"]
    controles_filtrados = df[df[columna_cups].isin(codigos_interes)]
    controles = controles_filtrados.groupby(columna_identificacion).size().reset_index(name='Número de controles')
    return controles


# Función para obtener la última fecha de controles ginecológicos
def obtener_ultimo_control_ginecologico(df, columna_identificacion, columna_fecha, columna_cups):
    codigos_ginecologia = ["890350", "890250"]
    controles_ginecologia = df[df[columna_cups].isin(codigos_ginecologia)]
    controles_ginecologia[columna_fecha] = pd.to_datetime(controles_ginecologia[columna_fecha], errors='coerce')
    ultimos_controles_ginecologia = controles_ginecologia.groupby(columna_identificacion)[columna_fecha].max()
    resultados_ginecologia = ultimos_controles_ginecologia.reset_index()
    resultados_ginecologia.columns = [columna_identificacion, "Último control ginecológico (fecha)"]
    resultados_ginecologia["Último control ginecológico (fecha)"] = resultados_ginecologia[
        "Último control ginecológico (fecha)"].dt.strftime('%Y-%m-%d')
    return resultados_ginecologia


# Nueva función para obtener la clasificación de riesgo de preeclampsia
def obtener_clasificacion_preeclampsia(df, columna_identificacion, columna_clasificacion, columna_fecha):
    # Convertir la columna de clasificación a cadena y la de fecha a datetime
    df[columna_clasificacion] = df[columna_clasificacion].astype(str)
    df[columna_fecha] = pd.to_datetime(df[columna_fecha], errors='coerce')

    # Filtrar solo los valores 4 (ALTO) y 5 (BAJO)
    df_filtrado = df[df[columna_clasificacion].isin(['4', '5'])]

    # Para cada paciente, obtener la clasificación más reciente (basada en la fecha)
    df_ultima_clasificacion = df_filtrado.loc[df_filtrado.groupby(columna_identificacion)[columna_fecha].idxmax()]

    # Crear una nueva columna con el resultado
    df_ultima_clasificacion['Clasificación riesgo preeclampsia'] = df_ultima_clasificacion[columna_clasificacion].apply(
        lambda x: "ALTO" if x == "4" else ("BAJO" if x == "5" else ""))

    # Resumir por paciente, con la clasificación más reciente
    clasificaciones_finales = df_ultima_clasificacion[[columna_identificacion, 'Clasificación riesgo preeclampsia']]

    return clasificaciones_finales


# Función para obtener la clasificación del riesgo gestacional
def obtener_clasificacion_riesgo_gestacional(df, columna_identificacion, columna_clasificacion, columna_fecha):
    # Convertir la columna de clasificación a cadena y la de fecha a datetime
    df[columna_clasificacion] = df[columna_clasificacion].astype(str)
    df[columna_fecha] = pd.to_datetime(df[columna_fecha], errors='coerce')

    # Filtrar solo los valores 4 (ALTO) y 5 (BAJO)
    df_filtrado = df[df[columna_clasificacion].isin(['4', '5'])]

    # Para cada paciente, obtener la clasificación más reciente (basada en la fecha)
    df_ultima_clasificacion = df_filtrado.loc[df_filtrado.groupby(columna_identificacion)[columna_fecha].idxmax()]

    # Crear una nueva columna con el resultado
    df_ultima_clasificacion['Clasificación riesgo gestacional'] = df_ultima_clasificacion[columna_clasificacion].apply(
        lambda x: "ALTO" if x == "4" else ("BAJO" if x == "5" else ""))

    # Resumir por paciente, con la clasificación más reciente
    clasificaciones_finales = df_ultima_clasificacion[[columna_identificacion, 'Clasificación riesgo gestacional']]

    return clasificaciones_finales


def clasificar_suministro_acido_acetilsalicilico(df, columna_identificacion, columna_suministro):
    """
    Clasifica el suministro de ácido acetilsalicílico según las siguientes reglas:
    - "SI" si al menos un suministro tiene "1".
    - "NO" si no tiene "1" pero al menos un suministro tiene "0".
    - En blanco si no hay ni "1" ni "0".
    """
    # Asegurarse de que la columna de suministro es texto
    df[columna_suministro] = df[columna_suministro].astype(str)

    # Inicializar lista para resultados
    resultados = []

    # Agrupar por paciente
    grupo_pacientes = df.groupby(columna_identificacion)

    for paciente, data in grupo_pacientes:
        # Obtener los valores únicos de suministro para este paciente
        valores_unicos = set(data[columna_suministro])

        if "1" in valores_unicos:
            resultados.append((paciente, "SI"))
        elif "0" in valores_unicos:
            resultados.append((paciente, "NO"))
        else:
            resultados.append((paciente, ""))

    # Crear un DataFrame con los resultados
    df_resultados = pd.DataFrame(resultados, columns=[columna_identificacion, "Suministro de ácido acetilsalicílico"])

    return df_resultados


def obtener_ultimo_control_its(df, columna_identificacion, columna_cups, columna_fecha):
    """
    Obtiene las fechas más recientes para ITS (Infecciones de Transmisión Sexual)
    según los CUPS especificados y las formatea a 'aaaa-mm-dd'.
    """
    # Lista de CUPS que corresponden a ITS
    cups_its = ["906220", "906222", "906317", "906223", "906318", "906324",
                "906221", "906225", "906262", "906266", "906332", "906249", "906039"]

    # Filtrar únicamente las filas con CUPS de ITS
    df_its = df[df[columna_cups].astype(str).isin(cups_its)]

    # Convertir la columna de fechas al formato datetime
    df_its[columna_fecha] = pd.to_datetime(df_its[columna_fecha], errors='coerce', format="%Y-%m-%d")

    # Seleccionar la última fecha por paciente
    resultados_its = (
        df_its.groupby(columna_identificacion)[columna_fecha]
        .max()
        .reset_index()
        .rename(columns={columna_fecha: "Última fecha ITS"})
    )

    # Formatear las fechas a 'aaaa-mm-dd'
    resultados_its["Última fecha ITS"] = resultados_its["Última fecha ITS"].dt.strftime('%Y-%m-%d')

    return resultados_its

def obtener_ultimo_control_partos(df, columna_identificacion, columna_cups, columna_fecha):
    """
    Obtiene las fechas más recientes para partos según los CUPS especificados y las formatea a 'aaaa-mm-dd'.
    """
    # Lista de CUPS que corresponden a partos
    cups_partos = ["721003", "735301", "740001", "740002", "732201", "735930",
                   "735931", "750302", "750301", "750303"]

    # Filtrar únicamente las filas con CUPS de partos
    df_partos = df[df[columna_cups].astype(str).isin(cups_partos)]

    # Convertir la columna de fechas al formato datetime
    df_partos[columna_fecha] = pd.to_datetime(df_partos[columna_fecha], errors='coerce', format="%Y-%m-%d")

    # Seleccionar la última fecha por paciente
    resultados_partos = (
        df_partos.groupby(columna_identificacion)[columna_fecha]
        .max()
        .reset_index()
        .rename(columns={columna_fecha: "Última fecha partos"})
    )

    # Formatear las fechas a 'aaaa-mm-dd'
    resultados_partos["Última fecha partos"] = resultados_partos["Última fecha partos"].dt.strftime('%Y-%m-%d')

    return resultados_partos

def clasificar_pospartos(df, columna_identificacion, columna_cups, columna_finalidad):
    """
    Clasifica a los pacientes como "SI" para POSPARTOS si cumplen:
    1. Tienen un CUPS en la lista específica.
    2. La finalidad es igual a "1".
    """
    # Lista de CUPS correspondientes a POSPARTOS
    cups_pospartos = ["890201", "890301"]

    # Filtrar las filas que cumplen con los criterios
    df_pospartos = df[
        (df[columna_cups].astype(str).isin(cups_pospartos)) &
        (df[columna_finalidad].astype(str) == "1")
    ]

    # Crear una nueva columna que indique "SI" para POSPARTOS
    df_pospartos = df_pospartos[[columna_identificacion]].drop_duplicates()
    df_pospartos["POSPARTOS"] = "SI"

    return df_pospartos


# Función general para ejecutar todas las tareas
def procesar_datos():
    try:
        ruta_entrada = filedialog.askopenfilename(
            title="Selecciona el archivo Excel",
            filetypes=[("Archivos de Excel", "*.xlsx *.xls")]
        )

        if not ruta_entrada:
            return

        df = pd.read_excel(ruta_entrada, sheet_name="tipo-3")

        fecha_referencia = calendario.get_date()

        # Llamar a las funciones individuales
        resultados_ultimos_controles = obtener_ultimos_controles(df, columna_identificacion="No Identificación",
                                                                 columna_fecha="Fecha de la tecnología en salud",
                                                                 fecha_referencia=fecha_referencia)
        resultados_controles = contar_controles_por_paciente(df, columna_identificacion="No Identificación",
                                                             columna_cups="Código CUPS de la tecnología en salud")
        resultados_ginecologia = obtener_ultimo_control_ginecologico(df, columna_identificacion="No Identificación",
                                                                     columna_fecha="Fecha de la tecnología en salud",
                                                                     columna_cups="Código CUPS de la tecnología en salud")
        resultados_clasificacion_preeclampsia = obtener_clasificacion_preeclampsia(df,
                                                                                   columna_identificacion="No Identificación",
                                                                                   columna_clasificacion="Clasificación del riesgo de preeclampsia",
                                                                                   columna_fecha="Fecha de la tecnología en salud")
        resultados_clasificacion_riesgo_gestacional = obtener_clasificacion_riesgo_gestacional(df,
                                                                                               columna_identificacion="No Identificación",
                                                                                               columna_clasificacion="Clasificación del riesgo gestacional",
                                                                                               columna_fecha="Fecha de la tecnología en salud")
        resultados_suministro_acido = clasificar_suministro_acido_acetilsalicilico(df,
                                                                                   columna_identificacion="No Identificación",
                                                                                   columna_suministro="Suministro de ácido acetilsalicílico - AS")
        resultados_its = obtener_ultimo_control_its(df, columna_identificacion="No Identificación",
                                                    columna_cups="Código CUPS de la tecnología en salud",
                                                    columna_fecha="Fecha de la tecnología en salud")

        resultados_partos = obtener_ultimo_control_partos(df, "No Identificación",
                                                          "Código CUPS de la tecnología en salud",
                                                          "Fecha de la tecnología en salud")
        pospartos = clasificar_pospartos(df, "No Identificación", "Código CUPS de la tecnología en salud",
                                         "Finalidad de la tecnología en salud (Consultas o procedimientos)")

        # Unir todos los resultados
        resultados_combinados = pd.merge(resultados_ultimos_controles, resultados_controles, on="No Identificación",
                                         how="outer")
        resultados_combinados = pd.merge(resultados_combinados, resultados_ginecologia, on="No Identificación",
                                         how="outer")
        resultados_combinados = pd.merge(resultados_combinados, resultados_clasificacion_preeclampsia,
                                         on="No Identificación", how="outer")
        resultados_combinados = pd.merge(resultados_combinados, resultados_clasificacion_riesgo_gestacional,
                                         on="No Identificación", how="outer")
        resultados_combinados = pd.merge(resultados_combinados, resultados_suministro_acido, on="No Identificación",
                                         how="outer")
        resultados_combinados = pd.merge(resultados_combinados, resultados_its, on="No Identificación", how="outer")
        resultados_combinados = pd.merge(resultados_combinados, resultados_partos, on="No Identificación", how="outer")
        resultados_combinados = pd.merge(resultados_combinados, pospartos, on="No Identificación", how="outer")

        ruta_salida = filedialog.asksaveasfilename(
            title="Guardar archivo como",
            defaultextension=".xlsx",
            filetypes=[("Archivos de Excel", "*.xlsx")]
        )

        if not ruta_salida:
            return

        with pd.ExcelWriter(ruta_salida, engine='xlsxwriter') as writer:
            resultados_combinados.to_excel(writer, index=False, sheet_name="Resultados Combinados")

        messagebox.showinfo("Éxito", f"Datos procesados correctamente y exportados a {ruta_salida}")

    except Exception as e:
        messagebox.showerror("Error", f"Ocurrió un error: {e}")


# Función para mostrar la interfaz gráfica
def mostrar_interfaz():
    global calendario
    ventana = tk.Tk()
    ventana.title("Procesar Datos Excel")
    ventana.geometry("400x400")

    fecha_lunes = obtener_fecha_lunes()

    calendario = Calendar(ventana, selectmode="day", date_pattern="yyyy-mm-dd", showweeknumbers=False)
    calendario.selection_set(fecha_lunes)  # Cambiar el método para seleccionar la fecha por defecto
    calendario.pack(pady=10)

    boton_procesar = tk.Button(ventana, text="Procesar Todos los Datos", command=procesar_datos)
    boton_procesar.pack(pady=20)

    ventana.mainloop()


# Ejecutar la interfaz
mostrar_interfaz()
